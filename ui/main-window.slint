import { VerticalBox, HorizontalBox, Button, LineEdit } from "std-widgets.slint";
import { Theme, ThemePalette } from "themes.slint";


component DropMenuElement inherits Rectangle {
    in property <duration> animate-duration: 200ms;
    in property <string> text;
    in property <bool> active;
    property <bool> hovered: bta.has-hover;

    callback pressed;

    background: transparent;
    width: 128px;
    height: 24px;
    clip: true;


    label := Text {
        text: parent.text;
        color: #000;
        vertical-alignment: center;
        horizontal-alignment: center;
        opacity: parent.hovered ? 1.0 : 0.5;
        animate opacity {
             duration: parent.animate-duration;
        }
    }

    Rectangle {
        x: (parent.width - self.width) / 2;
        y: parent.height - self.height;
        width: !parent.hovered ? (parent.active ? label.width + 28px : 0px) : label.width + 32px;
        height: 1px;
        background: #000;
        opacity: parent.hovered ? 1.0 : (parent.active ? 0.5 : 0.0);
        
        animate opacity {
             duration: parent.animate-duration;
        }
        animate width {
             duration: parent.animate-duration * 0.7;
        }
    }

    bta := TouchArea {
        clicked => {
            parent.pressed()
        } 
    }
}


export component AppWindow inherits Window {
    in property <ThemePalette> current-theme: Theme.dark_theme;

    property <duration> tab-animation-duration: 200ms;
    property <string> active-tab: "Main";
    property <bool> drop-menu-on: false; 

    Timer {
        interval: 0s;
        running: true;
        triggered => {
            Theme.current = root.current-theme;
            self.running = false;
        }
    }

    background: Theme.current.background;
    
    min-width: 360px; preferred-width: 480px; max-width: 600px;
    min-height: 600px; preferred-height: 800px; max-height: 1000px;


    top_bar := HorizontalBox {
        Rectangle {width: 16px;}

        drop_menu_btn := Rectangle {
            width: 32px;
            height: self.width;
            background: transparent;
                
            Image {
                source: @image-url("icons/list.svg");
                width: 16px;
                height: 16px;
                x: (parent.width - self.width) / 2;
                y: (parent.height - self.height) / 2;
            }
            TouchArea {
                clicked => {
                    root.drop-menu-on = !root.drop-menu-on;
                }
            }
        }

        Rectangle {background: transparent; horizontal-stretch: 1;}
    }
    
    
    drop_menu := Rectangle {
        property <length> static-width: root.width > root.height ? 160px : 360px;
        visible: self.opacity != 0;
        background: darkgray;
        z: 1;

        opacity: root.drop-menu-on ? 0.9 : 0.0;

        x:  root.drop-menu-on ?
                root.width > root.height ?
                    drop_menu_btn.x + ((drop_menu_btn.width - self.static-width) / 2) :
                    drop_menu_btn.x :
                drop_menu_btn.x;

        y:  root.drop-menu-on ? 
                drop_menu_btn.y + (drop_menu_btn.height * 1.7) :
                drop_menu_btn.y + drop_menu_btn.height;
            
            
        width:  root.drop-menu-on ?
                    self.static-width :
                    drop_menu_btn.width;

        height: root.drop-menu-on ?
                    root.width > root.height ?
                        360px :
                        160px :
                    drop_menu_btn.height;
        
        animate x, y, width, height, opacity {duration: root.tab-animation-duration;}


        VerticalBox {
            DropMenuElement {
                text: "Settings";
                active: root.active-tab == self.text;
                pressed => {root.active-tab = self.text;}
            }
            DropMenuElement {
                text: "Main";
                active: root.active-tab == self.text;
                pressed => {root.active-tab = self.text;}
            }
            DropMenuElement {
                text: "History";
                active: root.active-tab == self.text;
                pressed => {root.active-tab = self.text;}
            }
        }
    }
    
    
    main_tab := Rectangle {
        opacity: root.active-tab == "Main" ? 1.0 : 0.0;
        visible: self.opacity != 0;

        animate opacity {
            delay: root.tab-animation-duration / 2;
            duration: root.tab-animation-duration / 2;
        }

        email_input := LineEdit {
            placeholder-text: "Enter an email";
            property <length> side-padding: 32px;
            max-width: 768px;
            min-width: 256px;
            height: 32px;

            y: (parent.height / 2) - (self.height / 2);
            horizontal-alignment: center;
            width: parent.width < self.max-width + (self.side-padding * 2) ?  
                (parent.width < self.min-width + (self.side-padding * 2) ? self.min-width :
                parent.width - (self.side-padding * 2)) : self.max-width;
        }

        btns_box := HorizontalBox {
            property <bool> options-on: false;
            y: (parent.height / 2) + (email_input.height);
            height: email_input.height * 1.3;
            spacing: 24px;
            padding: 0px;
            padding-left: (self.width / 2) - ((enumerate_btn.width + options_btn.width + self.spacing) / 2);

            enumerate_btn := Button {
                text: "Enumerate";
                width: 150px;
            }
            options_btn := Rectangle {
                width: parent.height;
                height: parent.height;
                border-radius: 8px;
                background: #00FF85;

                Image {
                    source: options-on ? @image-url("icons/chevron-compact-up.svg") : @image-url("icons/chevron-compact-down.svg");
                    width: 16px;
                    height: 16px;
                    colorize: #F0F0F0;
                    x: (parent.width - self.width) / 2;
                    y: (parent.height - self.height) / 2;
                }
                TouchArea {
                    clicked => {
                        btns_box.options-on = !options_on;
                    }
                }
            }
        }

        options_box := Rectangle {
            visible: btns_box.options-on;
        }
    }
    
}
